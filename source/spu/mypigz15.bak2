#define VERSION "pigz 1.5\n"

#define CHUNK 65536
#define MAXSEG_64K
/* included headers and what is expected from each */
#include <stdio.h>      /* fflush(), fprintf(), fputs(), getchar(), putc(), */
                        /* puts(), printf(), vasprintf(), stderr, EOF, NULL,
                           SEEK_END, size_t, off_t */
#include <stdlib.h>     /* exit(), malloc(), free(), realloc(), atol(), */
                        /* atoi(), getenv() */
#include <stdarg.h>     /* va_start(), va_end(), va_list */
#include <string.h>     /* memset(), memchr(), memcpy(), strcmp(), */
                        /* strcpy(), strncpy(), strlen(), strcat() */
#include <errno.h>      /* errno, EEXIST */
#include <time.h>       /* ctime(), ctime_r(), time(), time_t */
#include <signal.h>     /* signal(), SIGINT */

#include <sys/types.h>  /* ssize_t */
#include <sys/stat.h>   /* chmod(), stat(), fstat(), lstat(), struct stat, */
                        /* S_IFDIR, S_IFLNK, S_IFMT, S_IFREG */
#include <sys/time.h>   /* utimes(), gettimeofday(), struct timeval */
#include <unistd.h>     /* unlink(), _exit(), read(), write(), close(), */
                        /* lseek(), isatty(), chown() */
#include <fcntl.h>      /* open(), O_CREAT, O_EXCL, O_RDONLY, O_TRUNC, */
                        /* O_WRONLY */
//#include <dirent.h>     /* opendir(), readdir(), closedir(), DIR, */
                        /* struct dirent */
#include <limits.h>     /* PATH_MAX */
#include "zlib.h"       /* deflateInit2(), deflateReset(), deflate(), */
                        /* deflateEnd(), deflateSetDictionary(), crc32(),
                           Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY,
                           Z_DEFLATED, Z_NO_FLUSH, Z_NULL, Z_OK,
                           Z_SYNC_FLUSH, z_stream */
#include "../zipinfo.h"
#include <spu_mfcio.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <malloc_align.h>
#include <free_align.h>

#define PUT4(a,b) (*(a)=(b),(a)[1]=(b)>>8,(a)[2]=(b)>>16,(a)[3]=(b)>>24)
/* largest power of 2 that fits in an unsigned int -- used to limit requests
   to zlib functions that use unsigned int lengths */
#define MAX ((((unsigned)-1) >> 1) + 1)

control_block cb __attribute__ ((aligned (128)));
unsigned char data[65536+32768] __attribute__ ((aligned (128)));
static time_t mtime;
static int dict;
static size_t size;

int main(unsigned long long speid, addr64 argp, addr64 envp){
	puts("started");       
        int i;

	printf("\n%udMAX\n", MAX);	
	puts("here"); 
	mfc_get(&cb, argp.ull, sizeof(cb), 31, 0, 0);
        mfc_write_tag_mask(1<<31);
        mfc_read_tag_status_all();
	puts("here2");
	for(i = 0; i<4;i++){
		mfc_get(&data[32768+i*16384], cb.address.ui[1]+(i*16384), 16384, 20, 0, 0);
		mfc_write_tag_mask(1<<20);
		mfc_read_tag_status_all();
	}
	puts("here3");
	
	printf("here4");
	
	//begin zipping portion
	unsigned long crc;
	unsigned long tot = (unsigned long)65536;
	int ret, flush;
    	unsigned have;
    	z_stream strm;
	char *name = "test";
	int level = 6;
	//write gzip header
	data[0] = 31;
	data[1] = 139;
    	data[2] = 8;                    /* deflate */
    	data[3] = 8;
    	data[4] = 0;
	data[5] = 0;
	data[6] = 0;
	data[7] = 0;
    	data[8] = 0;
    	data[9] = 3;                    /* unix */
	data[10] = 't';
	data[11] = 'e';
	data[12] = 's';
	data[13] = 't';
	data[14] = 'f';
	data[15] = 'i';
	data[16] = 'l';
	data[17] = 'e';
	data[18] = 0;
		
    	strm.zalloc = Z_NULL;
    	strm.zfree = Z_NULL;
    	strm.opaque = Z_NULL;
	crc = crc32(0L, Z_NULL, 0);
    	ret = deflateInit(&strm, 6);
//    	(void) deflateReset(&strm);
	if (ret != Z_OK){
		printf("error %d\n", ret);
        	return ret;
	}
        puts("here10");
    	/* compress until end of file */
	
    	do {
        	strm.avail_in = 65536;
        	flush = Z_FINISH;
        	strm.next_in = &data[32768];
		crc = crc32(crc, strm.next_in, strm.avail_in);

		
        	/* run deflate() on input until dataput buffer not full, finish
           	compression if all of source has been read in */
        	do {
            	strm.avail_out = CHUNK;
            	strm.next_out = &data[19];
            	ret = deflate(&strm, flush);    /* no bad return value */
            	assert(ret != Z_STREAM_ERROR);  /* state not clobbered */
            	have = CHUNK - strm.avail_out;
        	} while (strm.avail_out == 0);
        	assert(strm.avail_in == 0);     /* all input will be used */

        	/* done when last data in file processed */
    	} while (flush != Z_FINISH);
   	assert(ret == Z_STREAM_END);        /* stream will be complete */

    	/* clean up and return */
	//(void)deflateEnd(&strm);
//	data[strm.total_out+6] = 3;	
//	data[strm.total_out+6] = 0;	
	PUT4(&data[strm.total_out+15], crc);
	PUT4(&data[strm.total_out+19], tot);
	while((i = spu_readch(SPU_RdInMbox)) != cb.id);

	spu_writech(SPU_WrOutMbox, 12 );	
	spu_writech(SPU_WrOutMbox, (strm.total_out + 23));

	while ((i = spu_readch(SPU_RdInMbox)) != 9) ;	

	printf("\n SPE strlen = %d\n", (strm.total_out +27));	
	for(i = 0; i<4;i++){
                mfc_put(&data[i*16384], cb.address.ui[1]+(i*16384), 16384, 20, 0, 0);
                mfc_write_tag_mask(1<<20);
                mfc_read_tag_status_all();
        }
	spu_writech(SPU_WrOutMbox, 10);
	puts("i'm actually finishing!");
        return 0;
}

	

